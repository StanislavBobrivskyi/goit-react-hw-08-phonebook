{"version":3,"file":"static/js/79.8892ee81.chunk.js","mappings":"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","sources":["components/Form/LoginForm.jsx","Pages/Login.jsx","components/Form/Form.styled.jsx"],"sourcesContent":["// import React from 'react';\n// import { useForm } from 'react-hook-form';\n// import Notiflix from 'notiflix';\n// import * as yup from 'yup';\n// import { yupResolver } from '@hookform/resolvers/yup';\n\n// import { useDispatch } from 'react-redux';\n\n// import {\n//   StyledForm,\n//   StyledInput,\n//   FormButton,\n//   ErrorMessage,\n// } from './Form.styled';\n// import { logIn } from '../../redux/auth/authOperation';\n\n// export const loginSchema = yup\n//   .object()\n//   .shape({\n//     email: yup.string().email('Invalid email').required('Email is required'),\n//     password: yup\n//       .string()\n//       .min(7, 'Password must be at least 7 characters long')\n//       .required('Password is required'),\n//   })\n//   .required();\n\n// export function LoginForm() {\n//   const dispatch = useDispatch();\n\n//   const {\n//     register,\n//     handleSubmit,\n//     formState: { errors },\n//     reset,\n//   } = useForm({\n//     defaultValues: { email: '', password: '' },\n//     resolver: yupResolver(loginSchema),\n//   });\n\n//   const onSubmit = ({ email, password }) => {\n//     dispatch(logIn({ email, password }))\n//       .unwrap()\n//       .then(resp => {\n//         Notiflix.Notify.success(`Successfully logged in as ${resp.user.name}`);\n//       })\n//       .catch(e => {\n//         e === 'Request failed with status code 400'\n//           ? Notiflix.Notify.failure('Wrong email or password')\n//           : Notiflix.Notify.failure('Something went wrong, try one nore time!');\n//       });\n//     reset();\n//   };\n\n//   return (\n//     <>\n//       <StyledForm onSubmit={handleSubmit(onSubmit)}>\n//         <label htmlFor=\"email\">Email</label>\n//         <StyledInput {...register('email')} type=\"email\" id=\"email\" />\n//         <ErrorMessage>{errors.email?.message}</ErrorMessage>\n//         <label htmlFor=\"password\">Password</label>\n//         <StyledInput {...register('password')} type=\"password\" id=\"password\" />\n//         <ErrorMessage>{errors.password?.message}</ErrorMessage>\n//         <FormButton type=\"submit\">Login</FormButton>\n//       </StyledForm>\n//     </>\n//   );\n// }\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\n\nimport {\n  StyledForm,\n  StyledInput,\n  FormButton,\n  ErrorMessage,\n} from './Form.styled';\n\nimport { useDispatch } from 'react-redux';\nimport { logIn } from '../../redux/auth/authOperation';\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { email: '', password: '' },\n  });\n\n  const loginSchema = yup\n    .object()\n    .shape({\n      email: yup.string().email('Invalid email').required('Email is required'),\n      password: yup\n        .string()\n        .min(7, 'Password must be at least 7 characters long')\n        .required('Password is required'),\n    })\n    .required();\n\n  const onSubmit = ({ email, password }) => {\n    loginSchema\n      .validate({ email, password }, { abortEarly: false })\n      .then(() => {\n        dispatch(logIn({ email, password }))\n          .unwrap()\n          .then(resp => {\n            Notiflix.Notify.success(\n              `Successfully logged in as ${resp.user.name}`\n            );\n          })\n          .catch(e => {\n            e === 'Request failed with status code 400'\n              ? Notiflix.Notify.failure('Wrong email or password')\n              : Notiflix.Notify.failure(\n                  'Something went wrong, try one more time!'\n                );\n          });\n        reset();\n      })\n      .catch(errors => {\n        errors.inner.forEach(error => {\n          const field = error.path;\n          const errorMessage = error.message;\n          // Додайте код для відображення помилок для кожного поля форми\n          console.error(`Field: ${field}, Error: ${errorMessage}`);\n        });\n      });\n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"email\">Email</label>\n        <StyledInput {...register('email')} type=\"email\" id=\"email\" />\n        <ErrorMessage>{errors.email?.message}</ErrorMessage>\n        <label htmlFor=\"password\">Password</label>\n        <StyledInput {...register('password')} type=\"password\" id=\"password\" />\n        <ErrorMessage>{errors.password?.message}</ErrorMessage>\n        <FormButton type=\"submit\">Login</FormButton>\n      </StyledForm>\n    </>\n  );\n}\n","import React from 'react';\nimport { LoginForm } from '../components/Form/LoginForm';\nimport { NavigationLink } from '../components/AuthNav/AuthNav.styled';\n\nfunction Login() {\n  return (\n    <>\n      <h3>Login to your account</h3>\n      <LoginForm />\n      <h4>\n        Or use <NavigationLink to=\"/register\">Register</NavigationLink> to\n        create a new account\n      </h4>\n    </>\n  );\n}\n\nexport default Login;\n","import styled from '@emotion/styled';\n\nexport const StyledForm = styled.form`\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  border-radius: 6px;\n  padding: 16px 32px;\n  margin-left: auto;\n  margin-right: auto;\n  gap: 10px;\n`;\n\nexport const StyledInput = styled.input`\n  padding: 10px;\n  border-radius: 6px;\n  background-color: white;\n`;\nexport const FormButton = styled.button`\n  margin-top: 10px;\n  padding: 10px;\n  border-radius: 6px;\n  background-color: beige;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  padding: 8px;\n  &:focus,\n  &:hover {\n    background-color: rgb(232, 232, 185);\n  }\n`;\nexport const ErrorMessage = styled.p`\n  margin: 0px;\n  padding: 0px;\n`;\n"],"names":["LoginForm","_errors$email","_errors$password","dispatch","useDispatch","_useForm","useForm","defaultValues","email","password","register","handleSubmit","errors","formState","reset","loginSchema","yup","shape","required","min","_jsx","_Fragment","children","_jsxs","StyledForm","onSubmit","_ref","validate","abortEarly","then","logIn","unwrap","resp","Notiflix","concat","user","name","catch","e","inner","forEach","error","field","path","errorMessage","message","console","htmlFor","StyledInput","_objectSpread","type","id","ErrorMessage","FormButton","NavigationLink","to","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4"],"sourceRoot":""}