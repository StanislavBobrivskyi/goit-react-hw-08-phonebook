{"version":3,"file":"static/js/300.4c20ece0.chunk.js","mappings":"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","sources":["components/Form/RegisterForm.jsx","Pages/Register.jsx","components/Form/Form.styled.jsx"],"sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\nimport {\n  StyledForm,\n  StyledInput,\n  FormButton,\n  ErrorMessage,\n} from './Form.styled';\n\nimport { createUser } from '../../redux/auth/authOperation';\n\nexport const registrationSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Name is required'),\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup\n      .string()\n      .min(7, 'Password must be at least 7 characters long')\n      .required('Password is required'),\n  })\n  .required();\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { name: '', email: '', password: '' },\n    resolver: yupResolver(registrationSchema),\n  });\n\n  const onSubmit = ({ name, email, password }) => {\n    dispatch(createUser({ name, email, password }))\n      .unwrap()\n      .then(() => Notiflix.Notify.success('Account successfully created!'))\n      .catch(e =>\n        e === 'Request failed with status code 400'\n          ? Notiflix.Notify.failure(\n              'This user already exist! Use Log In button'\n            )\n          : Notiflix.Notify.failure('Something went wrong, try one nore time!')\n      );\n    reset();\n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"name\">Name</label>\n        <StyledInput {...register('name')} type=\"text\" id=\"name\" />\n        <ErrorMessage>{errors.name?.message}</ErrorMessage>\n        <label htmlFor=\"email\">Email</label>\n        <StyledInput {...register('email')} type=\"email\" id=\"email\" />\n        <ErrorMessage>{errors.email?.message}</ErrorMessage>\n        <label htmlFor=\"password\">Password</label>\n        <StyledInput {...register('password')} type=\"password\" id=\"password\" />\n        <ErrorMessage>{errors.password?.message}</ErrorMessage>\n        <FormButton type=\"submit\">Register</FormButton>\n      </StyledForm>\n    </>\n  );\n}\n\n// import React from 'react';\n// import { useForm } from 'react-hook-form';\n// import Notiflix from 'notiflix';\n// import * as yup from 'yup';\n// import { useDispatch } from 'react-redux';\n// import { createUser } from '../../redux/auth/authOperation';\n\n// import {\n//   StyledForm,\n//   StyledInput,\n//   FormButton,\n//   ErrorMessage,\n// } from './Form.styled';\n\n// export function RegisterForm() {\n//   const dispatch = useDispatch();\n\n//   const {\n//     register,\n//     handleSubmit,\n//     formState: { errors },\n//     reset,\n//   } = useForm({\n//     defaultValues: { name: '', email: '', password: '' },\n//   });\n\n//   const registrationSchema = yup\n//     .object()\n//     .shape({\n//       name: yup\n//         .string()\n//         .matches(\n//           /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n//           \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//         )\n//         .required('Name is required'),\n//       email: yup.string().email('Invalid email').required('Email is required'),\n//       password: yup\n//         .string()\n//         .min(7, 'Password must be at least 7 characters long')\n//         .required('Password is required'),\n//     })\n//     .required();\n\n//   const onSubmit = ({ name, email, password }) => {\n//     registrationSchema\n//       .validate({ name, email, password }, { abortEarly: false })\n//       .then(() => {\n//         dispatch(createUser({ name, email, password }))\n//           .unwrap()\n//           .then(() => Notiflix.Notify.success('Account successfully created!'))\n//           .catch(e =>\n//             e === 'Request failed with status code 400'\n//               ? Notiflix.Notify.failure(\n//                   'This user already exists! Use Log In button'\n//                 )\n//               : Notiflix.Notify.failure(\n//                   'Something went wrong, try one more time!'\n//                 )\n//           );\n//         reset();\n//       })\n//       .catch(errors => {\n//         errors.inner.forEach(error => {\n//           const field = error.path;\n//           const errorMessage = error.message;\n//           // Додайте код для відображення помилок для кожного поля форми\n//           console.error(`Field: ${field}, Error: ${errorMessage}`);\n//         });\n//       });\n//   };\n\n//   return (\n//     <>\n//       <StyledForm onSubmit={handleSubmit(onSubmit)}>\n//         <label htmlFor=\"name\">Name</label>\n//         <StyledInput {...register('name')} type=\"text\" id=\"name\" />\n//         <ErrorMessage>{errors.name?.message}</ErrorMessage>\n//         <label htmlFor=\"email\">Email</label>\n//         <StyledInput {...register('email')} type=\"email\" id=\"email\" />\n//         <ErrorMessage>{errors.email?.message}</ErrorMessage>\n//         <label htmlFor=\"password\">Password</label>\n//         <StyledInput {...register('password')} type=\"password\" id=\"password\" />\n//         <ErrorMessage>{errors.password?.message}</ErrorMessage>\n//         <FormButton type=\"submit\">Register</FormButton>\n//       </StyledForm>\n//     </>\n//   );\n// }\n","import React from 'react';\nimport { RegisterForm } from '../components/Form/RegisterForm';\n\nfunction Register() {\n  return (\n    <>\n      <h3>Create an account</h3>\n      <RegisterForm />\n    </>\n  );\n}\n\nexport default Register;\n","import styled from '@emotion/styled';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n  padding: 10px;\n`;\n\nexport const StyledInput = styled.input`\n  width: 250px;\n  border-radius: 6px;\n  outline: none;\n  border: 1px solid green;\n  padding: 5px;\n  background-color: #ffffff;\n  box-shadow: 1px 2px 6px 0px rgba(33, 83, 60, 0.5);\n\n  @media screen and (max-width: 768px) {\n    width: 250px;\n  }\n\n  &:focus {\n    border-color: #00ff00;\n  }\n`;\nexport const FormButton = styled.button`\n  margin-top: 40px;\n  padding: 6px;\n  width: 250px;\n  height: 100%;\n  flex-shrink: 0;\n  border-radius: 33.5px;\n  background: #3cb3ab;\n  border: none;\n  &:hover {\n    color: #fff;\n    background-color: #147a73;\n    box-shadow: 1px 2px 6px 0px rgba(33, 83, 60, 0.7);\n  }\n  box-shadow: 0 2px 4px rgba(33, 83, 60, 0.5);\n\n  @media screen and (max-width: 768px) {\n    font-size: 18px;\n  }\n`;\nexport const ErrorMessage = styled.p`\n  color: red;\n  font-size: 12px;\n  /* box-shadow: 0 0 10px #ff0000; */\n  border-radius: 25px;\n  padding: 2px 4px;\n  background-color: #fff;\n`;\n"],"names":["registrationSchema","yup","shape","name","matches","required","email","password","min","RegisterForm","_errors$name","_errors$email","_errors$password","dispatch","useDispatch","_useForm","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","reset","_jsx","_Fragment","children","_jsxs","StyledForm","onSubmit","_ref","createUser","unwrap","then","Notiflix","catch","e","htmlFor","StyledInput","_objectSpread","type","id","ErrorMessage","message","FormButton","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4"],"sourceRoot":""}