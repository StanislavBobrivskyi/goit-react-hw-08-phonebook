{"version":3,"file":"static/js/300.a7fbaffa.chunk.js","mappings":"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","sources":["components/Form/RegisterForm.jsx","Pages/Register.jsx","components/Form/Form.styled.jsx"],"sourcesContent":["// import React from 'react';\n// import { useForm } from 'react-hook-form';\n// import { useDispatch } from 'react-redux';\n// import { yupResolver } from '@hookform/resolvers/yup';\n// import Notiflix from 'notiflix';\n// import * as yup from 'yup';\n// import {\n//   StyledForm,\n//   StyledInput,\n//   FormButton,\n//   ErrorMessage,\n// } from './Form.styled';\n\n// import { createUser } from '../../redux/auth/authOperation';\n\n// export const registrationSchema = yup\n//   .object()\n//   .shape({\n//     name: yup\n//       .string()\n//       .matches(\n//         /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n//         \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//       )\n//       .required('Name is required'),\n//     email: yup.string().email('Invalid email').required('Email is required'),\n//     password: yup\n//       .string()\n//       .min(7, 'Password must be at least 7 characters long')\n//       .required('Password is required'),\n//   })\n//   .required();\n\n// export function RegisterForm() {\n//   const dispatch = useDispatch();\n\n//   const {\n//     register,\n//     handleSubmit,\n//     formState: { errors },\n//     reset,\n//   } = useForm({\n//     defaultValues: { name: '', email: '', password: '' },\n//     resolver: yupResolver(registrationSchema),\n//   });\n\n//   const onSubmit = ({ name, email, password }) => {\n//     dispatch(createUser({ name, email, password }))\n//       .unwrap()\n//       .then(() => Notiflix.Notify.success('Account successfully created!'))\n//       .catch(e =>\n//         e === 'Request failed with status code 400'\n//           ? Notiflix.Notify.failure(\n//               'This user already exist! Use Log In button'\n//             )\n//           : Notiflix.Notify.failure('Something went wrong, try one nore time!')\n//       );\n//     reset();\n//   };\n\n//   return (\n//     <>\n//       <StyledForm onSubmit={handleSubmit(onSubmit)}>\n//         <label htmlFor=\"name\">Name</label>\n//         <StyledInput {...register('name')} type=\"text\" id=\"name\" />\n//         <ErrorMessage>{errors.name?.message}</ErrorMessage>\n//         <label htmlFor=\"email\">Email</label>\n//         <StyledInput {...register('email')} type=\"email\" id=\"email\" />\n//         <ErrorMessage>{errors.email?.message}</ErrorMessage>\n//         <label htmlFor=\"password\">Password</label>\n//         <StyledInput {...register('password')} type=\"password\" id=\"password\" />\n//         <ErrorMessage>{errors.password?.message}</ErrorMessage>\n//         <FormButton type=\"submit\">Register</FormButton>\n//       </StyledForm>\n//     </>\n//   );\n// }\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { createUser } from '../../redux/auth/authOperation';\n\nimport {\n  StyledForm,\n  StyledInput,\n  FormButton,\n  ErrorMessage,\n} from './Form.styled';\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { name: '', email: '', password: '' },\n  });\n\n  const registrationSchema = yup\n    .object()\n    .shape({\n      name: yup\n        .string()\n        .matches(\n          /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        )\n        .required('Name is required'),\n      email: yup.string().email('Invalid email').required('Email is required'),\n      password: yup\n        .string()\n        .min(7, 'Password must be at least 7 characters long')\n        .required('Password is required'),\n    })\n    .required();\n\n  const onSubmit = ({ name, email, password }) => {\n    registrationSchema\n      .validate({ name, email, password }, { abortEarly: false })\n      .then(() => {\n        dispatch(createUser({ name, email, password }))\n          .unwrap()\n          .then(() => Notiflix.Notify.success('Account successfully created!'))\n          .catch(e =>\n            e === 'Request failed with status code 400'\n              ? Notiflix.Notify.failure(\n                  'This user already exists! Use Log In button'\n                )\n              : Notiflix.Notify.failure(\n                  'Something went wrong, try one more time!'\n                )\n          );\n        reset();\n      })\n      .catch(errors => {\n        errors.inner.forEach(error => {\n          const field = error.path;\n          const errorMessage = error.message;\n          // Додайте код для відображення помилок для кожного поля форми\n          console.error(`Field: ${field}, Error: ${errorMessage}`);\n        });\n      });\n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"name\">Name</label>\n        <StyledInput {...register('name')} type=\"text\" id=\"name\" />\n        <ErrorMessage>{errors.name?.message}</ErrorMessage>\n        <label htmlFor=\"email\">Email</label>\n        <StyledInput {...register('email')} type=\"email\" id=\"email\" />\n        <ErrorMessage>{errors.email?.message}</ErrorMessage>\n        <label htmlFor=\"password\">Password</label>\n        <StyledInput {...register('password')} type=\"password\" id=\"password\" />\n        <ErrorMessage>{errors.password?.message}</ErrorMessage>\n        <FormButton type=\"submit\">Register</FormButton>\n      </StyledForm>\n    </>\n  );\n}\n","import React from 'react';\nimport { RegisterForm } from '../components/Form/RegisterForm';\n\nfunction Register() {\n  return (\n    <>\n      <h3>Create an account</h3>\n      <RegisterForm />\n    </>\n  );\n}\n\nexport default Register;\n","import styled from '@emotion/styled';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n  padding: 10px;\n`;\n\nexport const StyledInput = styled.input`\n  width: 250px;\n  border-radius: 6px;\n  outline: none;\n  border: 1px solid green;\n  padding: 5px;\n  background-color: #ffffff;\n  box-shadow: 1px 2px 6px 0px rgba(33, 83, 60, 0.5);\n\n  @media screen and (max-width: 768px) {\n    width: 250px;\n  }\n\n  &:focus {\n    border-color: #00ff00;\n  }\n`;\nexport const FormButton = styled.button`\n  margin-top: 40px;\n  padding: 6px;\n  width: 250px;\n  height: 100%;\n  flex-shrink: 0;\n  border-radius: 33.5px;\n  background: #3cb3ab;\n  border: none;\n  &:hover {\n    color: #fff;\n    background-color: #147a73;\n    box-shadow: 1px 2px 6px 0px rgba(33, 83, 60, 0.7);\n  }\n  box-shadow: 0 2px 4px rgba(33, 83, 60, 0.5);\n\n  @media screen and (max-width: 768px) {\n    font-size: 18px;\n  }\n`;\nexport const ErrorMessage = styled.p`\n  font-size: 12px;\n  text-align: center;\n\n  color: red;\n  box-shadow: 0 0 10px #ff0000;\n  border-radius: 25px;\n  padding: 2px 4px;\n`;\n"],"names":["RegisterForm","_errors$name","_errors$email","_errors$password","dispatch","useDispatch","_useForm","useForm","defaultValues","name","email","password","register","handleSubmit","errors","formState","reset","registrationSchema","yup","shape","matches","required","min","_jsx","_Fragment","children","_jsxs","StyledForm","onSubmit","_ref","validate","abortEarly","then","createUser","unwrap","Notiflix","catch","e","inner","forEach","error","field","path","errorMessage","message","console","concat","htmlFor","StyledInput","_objectSpread","type","id","ErrorMessage","FormButton","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4"],"sourceRoot":""}