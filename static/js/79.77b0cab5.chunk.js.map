{"version":3,"file":"static/js/79.77b0cab5.chunk.js","mappings":"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","sources":["components/Form/LoginForm.jsx","Pages/Login.jsx","components/Form/Form.styled.jsx","../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","../node_modules/@hookform/resolvers/src/toNestErrors.ts","../node_modules/@hookform/resolvers/yup/src/yup.ts"],"sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport {\n  StyledForm,\n  StyledInput,\n  FormButton,\n  ErrorMessage,\n} from './Form.styled';\nimport { logIn } from '../../redux/auth/authOperation';\n\nexport const loginSchema = yup\n  .object()\n  .shape({\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup\n      .string()\n      .min(7, 'Password must be at least 7 characters long')\n      .required('Password is required'),\n  })\n  .required();\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { email: '', password: '' },\n    resolver: yupResolver(loginSchema),\n  });\n\n  const onSubmit = ({ email, password }) => {\n    dispatch(logIn({ email, password }))\n      .unwrap()\n      .then(resp => {\n        Notiflix.Notify.success(`Successfully logged in as ${resp.user.name}`);\n      })\n      .catch(e => {\n        e === 'Request failed with status code 400'\n          ? Notiflix.Notify.failure('Wrong email or password')\n          : Notiflix.Notify.failure('Something went wrong, try one nore time!');\n      });\n    reset();\n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"email\">Email</label>\n        <StyledInput {...register('email')} type=\"email\" id=\"email\" />\n        <ErrorMessage>{errors.email?.message}</ErrorMessage>\n        <label htmlFor=\"password\">Password</label>\n        <StyledInput {...register('password')} type=\"password\" id=\"password\" />\n        <ErrorMessage>{errors.password?.message}</ErrorMessage>\n        <FormButton type=\"submit\">Login</FormButton>\n      </StyledForm>\n    </>\n  );\n}\n","import React from 'react';\nimport { LoginForm } from '../components/Form/LoginForm';\nimport { NavigationLink } from '../components/AuthNav/AuthNav.styled';\n\nfunction Login() {\n  return (\n    <>\n      <h3>Login to your account</h3>\n      <LoginForm />\n      <h4>\n        Or<NavigationLink to=\"/register\">Register</NavigationLink> to create a\n        new account\n      </h4>\n    </>\n  );\n}\n\nexport default Login;\n","import styled from '@emotion/styled';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n  padding: 10px;\n`;\n\nexport const StyledInput = styled.input`\n  width: 250px;\n  border-radius: 6px;\n  outline: none;\n  border: 1px solid green;\n  padding: 5px;\n  background-color: #ffffff;\n  box-shadow: 1px 2px 6px 0px rgba(33, 83, 60, 0.5);\n\n  @media screen and (max-width: 768px) {\n    width: 250px;\n  }\n\n  &:focus {\n    border-color: #00ff00;\n  }\n`;\nexport const FormButton = styled.button`\n  margin-top: 40px;\n  padding: 6px;\n  width: 250px;\n  height: 100%;\n  flex-shrink: 0;\n  border-radius: 33.5px;\n  background: #3cb3ab;\n  border: none;\n  &:hover {\n    color: #fff;\n    background-color: #147a73;\n    box-shadow: 1px 2px 6px 0px rgba(33, 83, 60, 0.7);\n  }\n  box-shadow: 0 2px 4px rgba(33, 83, 60, 0.5);\n\n  @media screen and (max-width: 768px) {\n    font-size: 18px;\n  }\n`;\nexport const ErrorMessage = styled.p`\n  color: red;\n  font-size: 12px;\n  /* box-shadow: 0 0 10px #ff0000; */\n  border-radius: 25px;\n  padding: 2px 4px;\n  background-color: #fff;\n`;\n","import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n  FieldValues,\n  InternalFieldName,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign(\n        {},\n        compact(get(fieldErrors, path)),\n      );\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst compact = <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => names.some((n) => n.startsWith(name + '.'));\n","import * as Yup from 'yup';\nimport { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport {\n  appendErrors,\n  FieldError,\n  FieldValues,\n  Resolver,\n} from 'react-hook-form';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport function yupResolver<TFieldValues extends FieldValues>(\n  schema:\n    | Yup.ObjectSchema<TFieldValues>\n    | ReturnType<typeof Yup.lazy<Yup.ObjectSchema<TFieldValues>>>,\n  schemaOptions: Parameters<(typeof schema)['validate']>[1] = {},\n  resolverOptions: {\n    /**\n     * @default async\n     */\n    mode?: 'async' | 'sync';\n    /**\n     * Return the raw input values rather than the parsed values.\n     * @default false\n     */\n    raw?: boolean;\n  } = {},\n): Resolver<Yup.InferType<typeof schema>> {\n  return async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.raw ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestErrors(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n}\n"],"names":["loginSchema","yup","shape","email","required","password","min","LoginForm","_errors$email","_errors$password","dispatch","useDispatch","_useForm","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","reset","_jsx","_Fragment","children","_jsxs","StyledForm","onSubmit","_ref","logIn","unwrap","then","resp","Notiflix","concat","user","name","catch","e","htmlFor","StyledInput","_objectSpread","type","id","ErrorMessage","message","FormButton","NavigationLink","to","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","t","i","n","r","setCustomValidity","reportValidity","fields","ref","refs","forEach","shouldUseNativeValidation","f","s","u","c","Object","assign","a","names","keys","l","o","Array","isArray","filter","Boolean","some","startsWith","Promise","resolve","context","mode","abortEarly","values","raw","inner","criteriaMode","reduce","path","types","reject"],"sourceRoot":""}